import pandas as pd
import numpy as np
from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification 
from scipy.special import softmax
from deep_translator import GoogleTranslator


# File okuma 
df = pd.read_csv('...\\FloProjesi\\Web Scraping\\FloKadin.csv', encoding="latin5")
# Değerlendirmeleri ürün numarasına göre gruplamak ve lisede koymak
prodectNo_comments = df.groupby('Ürün numarasi')['Yorum text'].apply(list).reset_index()
#print(prodectNo_comments)

# MultiLanguage model yükleme
MODEL = F"cardiffnlp/twitter-roberta-base-sentiment-latest"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)


def analyze_product(product_no):
    # Ürün numarasını DataFrame’den bul
    row = prodectNo_comments[prodectNo_comments['Ürün numarasi'] == product_no]

    # öncelikle DataFrame'i string listeye dönüştürme sonra modeli kullanma
    comments = row['Yorum text'].values[0]
    labels = ["negative", "neutral", "positive"]
    all_scores = []
    yorumlar_list = []
    for comment in comments:
        # Türkçe yorum -> İngilizce çeviri
        translated = GoogleTranslator(source='tr', target='en').translate(comment)
        # RoBerta modeli kullanmak
        encoded = tokenizer(translated, padding=True, truncation=True, max_length=512, return_tensors='pt')
        # Model çıktısı
        output = model(**encoded)
        # Softmax ile skorları alındı
        scores = softmax(output.logits.detach().numpy()[0])
        all_scores.append(scores)
        
        yorumlar_list.append({
           "yorum": comment,
           "negative": float(scores[0]),
           "neutral": float(scores[1]),
           "positive": float(scores[2])
       })
        
    # Ortalama skorları al
    avg_scores = np.mean(all_scores, axis=0)    
    score_dict = {labels[j]: float(avg_scores[j]) for j in range(len(labels))}
    
    # En yüksek skoru bul
    sentiment = max(score_dict, key=score_dict.get)
    return {
        "urun_no": product_no,
        "ortalama_skor": score_dict,
        "sentiment": sentiment.upper(),
        "yorumlar": yorumlar_list
    }
    
# Kullanıcıdan ürün numarası al
while True:
    product_input  = input("Ürün numarası gir (çıkmak için 'q'): ")
    if product_input .lower() == "q":
        break
    # Girilen input str olarak algılandığı için int çevirildi
    product_no = int(product_input)
    result = analyze_product(product_no)
    print(f"Ürün {result['urun_no']} için sonuç: {result['sentiment']} → {result['ortalama_skor']}")

    
    # Negatif yorumları gösterme seçeneği
    show_neg = input("Negatif yorumları görmek ister misiniz? (e/h): ")
    if show_neg.lower() == 'e':
         print("\nNegatif yorumlar:")
         for c in result['yorumlar']:
               if c['negative'] > max(c['neutral'], c['positive']):
                   print(f"- {c['yorum']}")
